# Build and autotest script for PX4 Firmware
# http://travis-ci.org

language: cpp

git:
  depth: 1500

# white list
branches:
  only:
  - develop
  - /^v[0-9].*$/
  - /^release_[0-9].*$/
  - /^release-[0-9].*$/

env:
  global:
    - BRANCH=develop

matrix:
  fast_finish: true
  include:
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_FLAVOR=autopilot_yuneec
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_FLAVOR=autopilot_episci
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_FLAVOR=autopilot_3dr
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_FLAVOR=autopilot_nfirc
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_FLAVOR=check_format
    - os: linux
      sudo: required
      services:
        - docker
      env: BUILD_FLAVOR=clang-tidy
#     - os: osx
#       sudo: true
#       osx_image: xcode9.2
#       env: BUILD_FLAVOR=tests

cache:
  ccache: true

before_install:
  - if [[ "${TRAVIS_OS_NAME}" = "linux" && "${TRAVIS_BRANCH}" == "coverity" ]]; then sudo apt-get install genromfs && pip install empy jinja2; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then brew tap PX4/px4; brew update; brew upgrade; brew install px4-dev; brew tap osrf/simulation; brew install gazebo7 opencv; brew install s3cmd && sudo -H easy_install pip && pip install --user numpy toml empy catkin_pkg jinja2 pyyaml; fi
  - if [[ "${BUILD_FLAVOR}" = *"autopilot"* && "${TRAVIS_BRANCH}" != "coverity" ]]; then pip install --user s3cmd pycrypto pyserial; sudo apt-get install -y curl; fi

script:
    # Exit if one of the scripts fails.
  - set -e
  - if [[ "${BUILD_FLAVOR}" = "autopilot_yuneec" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
      ./Tools/docker_run.sh 'PX4_RESTRICTED_BUILD=1 make check_yuneec_tap-v2_h520 check_yuneec_tap-v3_h520mk2 check_yuneec_tap-v3_mobilicom';
    elif [[ "${BUILD_FLAVOR}" = "autopilot_episci" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
      ./Tools/docker_run.sh 'PX4_RESTRICTED_BUILD=1 PX4_EPISCI_BUILD=1 make check_yuneec_tap-v2_h520 check_yuneec_tap-v3_h520mk2';
    elif [[ "${BUILD_FLAVOR}" = "autopilot_3dr" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
    ./Tools/docker_run.sh 'PX4_3DR_BUILD=1 make check_yuneec_tap-v2_h520 check_yuneec_tap-v3_h520mk2';
    elif [[ "${BUILD_FLAVOR}" = "autopilot_nfirc" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
    ./Tools/docker_run.sh 'PX4_NFIRC_BUILD=1 make check_yuneec_tap-v2_h520 check_yuneec_tap-v3_h520mk2';
    elif [[ "${BUILD_FLAVOR}" = "check_format" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
      ./Tools/docker_run.sh 'make check_format';
    elif [[ "${BUILD_FLAVOR}" = "tests_linux" && "${TRAVIS_BRANCH}" != "coverity" ]]; then
      ./Tools/docker_run.sh 'make tests';
    elif [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      make tests;
    elif [ "${BUILD_FLAVOR}" = "clang-tidy" ]; then
      ./Tools/docker_run.sh 'make clang-tidy-quiet';
    fi;

after_success:
  - set -ev
  - source ./s3_deploy.sh
